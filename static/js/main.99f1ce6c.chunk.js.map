{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","sort","isReversed","reverse","visibleGoods","goods","LENGTH","g1","g2","length","ALPHABET","localeCompare","getReorderedGoods","className","onClick","type","classNames","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA0CK,SAASC,IACd,MAAyBC,mBAASH,EAASI,MAA3C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA8BH,oBAAS,GAAvC,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAhCD,SACLC,EADK,GAGJ,IADCL,EACF,EADEA,SAAUE,EACZ,EADYA,WAENE,EAAY,YAAOC,GAczB,OAZIL,IAAaL,EAASW,QACxBF,EAAaH,MAAK,SAACM,EAAIC,GACrB,OAAOD,EAAGE,OAASD,EAAGC,UAItBT,IAAaL,EAASe,UACxBN,EAAaH,MAAK,SAACM,EAAIC,GACrB,OAAOD,EAAGI,cAAcH,MAIxBN,EACKE,EAAaD,UAGfC,EAUcQ,CACnBhB,EACA,CAAEI,WAAUE,eAGd,OACE,sBAAKW,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMb,EAAKN,EAASe,WAC7BK,KAAK,SACLF,UACEG,IACE,SACA,UACA,CAAE,WAAYhB,IAAaL,EAASe,WAP1C,iCAcA,wBACEI,QAAS,kBAAMb,EAAKN,EAASW,SAC7BS,KAAK,SACLF,UACEG,IACE,SACA,aACA,CAAE,WAAYhB,IAAaL,EAASW,SAP1C,4BAcA,wBACEQ,QAAS,kBAAMX,GAASD,IACxBa,KAAK,SACLF,UACEG,IACE,SACA,aACA,CAAE,YAA2B,IAAfd,IAPpB,sBAcEF,IAAaL,EAASI,MAAQG,IAC9B,wBACEa,KAAK,SACLD,QAAS,WACPb,EAAKN,EAASI,MACdI,GAAQ,IAEVU,UACEG,IACE,SACA,YACA,YAVN,sBAmBJ,6BACGZ,EAAaa,KAAI,SAACC,GAAD,OAChB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,Y,SAnHdvB,O,eAAAA,I,mBAAAA,I,wBAAAA,M,KCfLwB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.99f1ce6c.chunk.js","sourcesContent":["import { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  LENGTH,\n  ALPHABET,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  if (sortType === SortType.LENGTH) {\n    visibleGoods.sort((g1, g2) => {\n      return g1.length - g2.length;\n    });\n  }\n\n  if (sortType === SortType.ALPHABET) {\n    visibleGoods.sort((g1, g2) => {\n      return g1.localeCompare(g2);\n    });\n  }\n\n  if (isReversed) {\n    return visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n\n  // eslint-disable-next-line no-console\n  // console.log(sortType, isReversed);\n}\n\nexport function App() {\n  const [sortType, sort] = useState(SortType.NONE);\n  const [isReversed, reverse] = useState(false);\n\n  const visibleGoods = getReorderedGoods(\n    goodsFromServer,\n    { sortType, isReversed },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => sort(SortType.ALPHABET)}\n          type=\"button\"\n          className={\n            classNames(\n              'button',\n              'is-info',\n              { 'is-light': sortType !== SortType.ALPHABET },\n            )\n          }\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => sort(SortType.LENGTH)}\n          type=\"button\"\n          className={\n            classNames(\n              'button',\n              'is-success',\n              { 'is-light': sortType !== SortType.LENGTH },\n            )\n          }\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => reverse(!isReversed)}\n          type=\"button\"\n          className={\n            classNames(\n              'button',\n              'is-warning',\n              { 'is-light': isReversed === false },\n            )\n          }\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed) && (\n          <button\n            type=\"button\"\n            onClick={() => {\n              sort(SortType.NONE);\n              reverse(false);\n            }}\n            className={\n              classNames(\n                'button',\n                'is-danger',\n                'is-light',\n              )\n            }\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}